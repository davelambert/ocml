;;; -*- Mode: LISP; Syntax: Common-lisp; Base: 10; Package: COMMON-LISP-USER;   -*-(in-package "COMMON-LISP-USER")(eval-when (eval compile load)  (unless (ignore-errors (logical-pathname-translations  "OCML"))    #+:mcl(load "Stuff:Users:Enrico:Recent Stuff:code:logical-pathnames.lisp")    #+:HARLEQUIN-PC-LISP (load "C:\\users\\jbd2\\code\\logical-pathnames.lisp")    #+:lispworks (load "C:\\users\\jbd2\\code\\logical-pathnames.lisp"))) (eval-when (eval compile load)  (defparameter *source-pathname* "OCML:EXPERIMENTAL;SOURCE;")  (defparameter *utilities-pathname* "UTIL:EXPERIMENTAL;")  (defparameter *library-pathname* "OCML:LIBRARY;")  (load  (merge-pathnames *utilities-pathname* "sysdcl")));;;PACKAGE OCML(defpackage ocml  (:use    "COMMON-LISP" "UTILITIES"));;;*OCML-VERSION* ---This is set in file patches.lisp(defvar *ocml-version* "7.3")(import '(*source-pathname* *utilities-pathname*            *lisp-suffix* *binary-suffix*          *ocml-version* *library-pathname*)        (find-package "OCML"));;;separate out control4 to enable redefinition of ocml-metaclass john domingue may 21 98 #+:LISPWORKS(defsystem ocml-after-web-onto  (   :default-pathname  *source-pathname*   :package ocml   :default-type :lisp-file)   :members   ("control4")   :rules((:In-order-to :compile :all                        (:requires (:Load :Previous)))))#+:lispworks(defsystem ocml  (   :default-pathname  *source-pathname*   :package ocml   :default-type :lisp-file)   :members (("util" :type :system)                "vars4"                 "io"                 "match3"		 "rels7"		 "meta"                 "funs7"		 "basic21"                 "domain6"                 "rules4"                 "parser5"                 "tellask4"		 "backwrd21"                 "top9"                 "fc"                 "rete4"                 "wm2"                 "fc-call3"                 "theories5"                 ;;;"compiler11"                ;;;;; "compiler18"                 "axioms"                 "mapping4"                ;;;;;; "backcmp2"                 "describe"                 "slot-renaming3"                 ;;"control4"                 "delete-things"                 "constrs2"                 "ocml-to-ontolingua2"                 "ocml-to-rdfs5"                 "patches2"             )   :rules ((:In-order-to :compile :all                        (:requires (:Load :Previous)))));;;this version includes control4(defsystem ocml-all  (   :default-pathname  *source-pathname*   :package ocml   :default-type :lisp-file)   :members (("util" :type :system)                "vars4"                 "io"                 "match3"		 "rels7"		 "meta"                 "funs7"		 "basic21"                 "domain6"                 "rules4"                 "parser5"                 "tellask4"		 "backwrd21"                 "top9"                 "fc"                 "rete4"                 "wm2"                 "fc-call3"                 "theories5"                 ;;;"compiler11"                ;;;;; "compiler18"                 "axioms"                 "mapping4"                ;;;;;; "backcmp2"                 "describe"                 "slot-renaming3"                 "control4"                 "delete-things"                 "constrs2"                 "ocml-to-ontolingua2"                 "ocml-to-rdfs5"                 "patches2"             )   :rules ((:In-order-to :compile :all                        (:requires (:Load :Previous)))))#+:LISPWORKS(defun load-ocml (&optional compile? force?)  (if compile?      (defsystem:compile-system 'ocml :load t :force force?)      (defsystem:load-system 'ocml )));;;If we are not using lispworks, then we load the files explicitly, one by one.;;;Allegro doesn't seem to have a good file system interface, so the allegro-specific;;;code is a bit messy#-:LISPWORKS(defun load-ocml (&optional compile? force?)  (Let ((fun (if force?               #'(lambda (x)                   (delete-file  (concatenate 'string x "." *binary-suffix*)                                 :if-does-not-exist nil)                   (compile-file x :verbose t)                   (load x :verbose t))               (if compile?                 #'(lambda (x)                     (compile-file-if-necessary x)                     (load x :verbose t))                 #'(lambda (x)                      (load x :verbose t))))))     (map nil fun         (append           (mapcar #'(lambda (file)                         (concatenate 'string *utilities-pathname* file))                 *utilities-source-files*)         (mapcar #'(lambda (file)                     (concatenate 'string *source-pathname* file))                 '("vars4"                   "io"                   "match3"		   "rels7"		   "meta"                   "funs7"		   "basic21"                   "domain6"                   "rules4"                   "parser5"                   "tellask4"		   "backwrd21"                   "top9"                   "fc"                   "rete4"                   "wm2"                   "fc-call3"                   "theories5"                   ;;;"compiler11"                   ;;;;"compiler18"                   "axioms"                   "mapping4"                  ;;;;; "backcmp2"                   "describe"                   "slot-renaming3"                   "control4"                   "delete-things"                   "constrs2"                   "ocml-to-ontolingua2"                   "ocml-to-rdfs5"                   "patches2"))))))(eval-when (eval load)  (Load-ocml t ))                                                  